??Brute force Solution having 
Time Complexity=(m+n)
space Complexity=(m+n)


code:-
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m=nums1.size();
        int n=nums2.size();
        vector<int>result(m+n);
        int i=0,j=0,k=0;
        while(i<m && j<n)
        {
            if(nums1[i]<nums2[j])
            {
               result[k++]=nums1[i++]; 
            }
            else{
                result[k++]=nums2[j++];
            }
        }
        while(i<m)
        {
            result[k++]=nums1[i++];    
        }
        while(j<n)
        {
            result[k++]=nums2[j++];
        }
        return (k%2==1)?result[k/2]:(result[k/2]+(result[k/2-1]))/2.0;
    }
};


Optimal Solution
Time Complexity=O(m+n)
Space Complexity=O(1)

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size();
        int n2 = nums2.size();

        int n = n1 + n2;

        int i = 0, j = 0;
        int count = 0;

        int medianFirstIndex = n / 2 - 1;
        int medianSecondIndex = n / 2;

        int medianFirstElement = -1;
        int medianSecondElement = -1;
        while (i < n1 && j < n2) {
            if (nums1[i] < nums2[j]) {
                if (count == medianFirstIndex)
                    medianFirstElement = nums1[i];
                if (count == medianSecondIndex)
                    medianSecondElement = nums1[i];
                count++;
                i++;
            } else {
                if (count == medianFirstIndex)
                    medianFirstElement = nums2[j];
                if (count == medianSecondIndex)
                    medianSecondElement = nums2[j];
                count++;
                j++;
            }
        }
        while (i < n1) {
            if (count == medianFirstIndex)
                medianFirstElement = nums1[i];
            if (count == medianSecondIndex)
                medianSecondElement = nums1[i];
            count++;
            i++;
        }
        while (j < n2) {
            if (count == medianFirstIndex)
                medianFirstElement = nums2[j];
            if (count == medianSecondIndex)
                medianSecondElement = nums2[j];
            count++;
            j++;
        }
        if (n % 2 == 1)
            return medianSecondElement;
        else
            return (medianFirstElement + medianSecondElement) / 2.0;
    }
};
