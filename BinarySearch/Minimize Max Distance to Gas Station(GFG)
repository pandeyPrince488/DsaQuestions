//Brute Force 
time Complexity=(n*k)
space Complexity=(n-1)
double findSmallestMaxDist(vector<int> &stations, int k) {
        int n=stations.size();
        vector<int>howMany(n-1,0);
        for(int gasStation=1;gasStation<=k;gasStation++)
        {
            long double maxSection=-1;
            long double maxSectionIndex=-1;
            for(int i=0;i<n-1;i++)
            {
                long double currentDiffrence=stations[i+1]-stations[i];
                long double sectionLength=currentDiffrence/(howMany[i]+1);
                if(sectionLength>maxSection)
                {
                    maxSection=sectionLength;
                    maxSectionIndex=i;
                }
            }
            howMany[maxSectionIndex]++;
        }
        long double result=-1;
        for(int i=0;i<n-1;i++)
        {
           long double currentDiffrence=stations[i+1]-stations[i];
           long double sectionLength=currentDiffrence/(howMany[i]+1);
           
           result=max(result,sectionLength);
        }
        return result;
    }





Optimal Binary search one 







class Solution {
  public:
  bool checkMinimumStationNeeded(vector<int> &stations, int k, double maxDist )
 {
     int gasStationNeeded=0;
     for(int i=0;i<stations.size()-1;i++)
     {
         double diffrence=stations[i+1]-stations[i];
         gasStationNeeded+=int(diffrence/maxDist);
    
     }
     return gasStationNeeded<=k;
  }
    double findSmallestMaxDist(vector<int> &stations, int k) {
        double start=0;
        double end =0;
        for(int i=0;i<stations.size()-1;i++)
        {
           end=max(end,(double)stations[i+1]-stations[i]) ;
        }
        double limit=1e-6;
        while((end-start)>limit)
        {
            double mid=start+(end-start)/2.0;
            bool isPossible=checkMinimumStationNeeded(stations,k,mid);
            if(isPossible)
            {
                end =mid;
            }
            else{
                start=mid;
            }
        }
      return floor(end * 100.0 + 0.5) / 100.0;

    }
};
