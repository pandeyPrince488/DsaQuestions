class Solution {
public:
bool calculateEatingSpeed(vector<int>& piles, int h,int currentSpeed)
{
    long long countHours=0;
    for(int pile:piles)
    {
        if((pile%currentSpeed)==0)
        {
            countHours+=(pile/currentSpeed);
        }
        else{
            countHours+=(pile/currentSpeed)+1;
        }
    }
    return countHours<=h;
}
    int minEatingSpeed(vector<int>& piles, int h) {
        int n = piles.size();
        int start = 1;
        int end = *max_element(piles.begin(), piles.end());
        int result = end;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (calculateEatingSpeed(piles, h, mid)) {
                result = mid;
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return result;
    }
};
